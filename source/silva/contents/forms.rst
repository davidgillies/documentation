
Autogenerated Forms
===================

Formlib Forms
-------------

You can create forms from your Python code for your content. To do
this you need an interface that defines which fields are on your
object.

.. code-block:: python

   from zope import interface, schema

   class IMyContent(interface.Interface):

       email = schema.TextLine(
           title=u"Email address",
           description=u"Your email address, free of spam.",
           required=False)

       contact_url = schema.URI(
           title=u"Contact URL",
           required=True)

.. note::

   The Python package ``zope.schema`` defines many different field
   types. You can find other form libraries on the Cheeseshop.

Your content needs to implement this interface. You can implement
these fields with the help of a ``FieldProperty``.

.. code-block:: python

  from zope.schema.fieldproperty import FieldProperty

  class MyContent(...):
       ...
       interface.implements(IMyContent)
       email = FieldProperty(IMyContent['email'])
       contact_url = FieldProperty(IMyContent['contact_url'])

So now your object can use the ``email`` and ``contact_url``
attributes, as you have declared in your interface.

Add forms
~~~~~~~~~

Now, define an add form:

.. code-block:: python

   from silva.core import conf as silvaconf
   from silva.core.views import forms as silvaforms

   class MyContentAddForm(silvaforms.AddForm):

       silvaconf.context(IMyContent)
       silvaconf.name("My Content")

``silvaconf.name`` must be the meta type of your content type. As you
can see, your interface doesn't provide any fields for the required
``id``, and ``title``, but these will be added automatically.

.. note::

   An add form is a Zope 3 factory, registered for the given Zope 2
   meta type. If you register your own factory, it will be used when
   you create your content via the Silva Management Interface.

If you have versioned content, you should have two interfaces: one for
your content and one for your version. Since yours fields should be
versioned, they should be defined on the version's interface:

.. code-block:: python

  class IMyVersionContent(interface.Interface):
      """A version of my content object.
      """

      info = schema.Text(title=u"General information")
      ...       # Add others fields

On your add form, you have to explicitly say that form fields are
going to be created using your version's interface *(line 8)*:

.. code-block:: python
  :linenos:

  from five import grok

  class MyContentAddForm(silvaforms.AddForm):

     silvaconf.context(IMyContent)
     silvaconf.name("My Content")

     form_fields = grok.Fields(IMyVersionContent)

After creating the new content, the add form is going to fill values
for these fields on the *editable* object, returned by your content.

Edit forms
~~~~~~~~~~

You can create an edit form by doing the following:

.. code-block:: python

   from silva.core import conf as silvaconf

   class MyContentEditForm(silvaforms.EditForm):

        silvaconf.context(IMyContent)

That's it. The ``id`` and ``title`` fields are not provided, and
should not by provided: an object can be renamed from its parent
container, and the title is managed via the properties tab.

As we saw with the add form, when you have versioned content, you
should create form fields using the version's interface *(line 5)*:

.. code-block:: python
  :linenos:

  class MyContentEditForm(silvaforms.EditForm):

       silvaconf.context(IMyContext)

       form_fields = grok.Fields(IMyVersionContent)

Others forms
~~~~~~~~~~~~

You can override any form from the SMI. We define a new interface with
settings fields:

.. code-block:: python

   class IMyContentSettings(interface.Interface):
       """Settings for my content.
       """

       hide_email = schema.Bool(
           title=u"Hide email address",
           default=True,
           required=False)

And after you can use this interface for your form:

.. code-block:: python

   from five import grok

   class MyContentSettingsForm(silvaforms.PageForm):

       silvaconf.context(IMyContent)
       silvaconf.name("tab_settings")

       # Set form fields using our new interface
       form_fields = grok.Fields(IMyContentSettings)

       # Define one action
       @grok.action(u"Send information")
       def action_send(self, hide_email):
            # hide_email contain the validated form value
            pass

``silvaconf.name`` is used here to define the name of the form. Here
it will defined as ``tab_settings``, which is accessible via the
``properties`` tab in SMI.

.. hint::

   You can define new actions for adding and edit forms as well, like
   settings custom fields. For more information about that, please
   refer to the formlib documentation.

Z3C Forms
---------

Another option you can use Z3C Forms Formlib library.

Here is a simple example of an add form for some versioned content:

.. code-block:: python

   from silva.core import silvaconf
   from silva.core.views import z3cforms as silvaz3cforms
   from z3c.forms import field

   class MyContentAddForm(silvaz3cforms.AddForm):

       silvaconf.context(IMyContent)
       silvaconf.name("My Content")

       fields = field.Fields(IMyVersionContent)

For more information about Z3C Forms `here
<http://docs.carduner.net/z3c.form/>`_.
