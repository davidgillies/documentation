
Autogenerated Forms
===================

Formlib Forms
-------------

You can create forms from your Python code for your content. For that
you are going to need an interface which describes which are the
fields on your object.


.. code-block:: python

  from zope import interface, schema

  class IMyContent(interface.Interface):

       email = schema.TextLine(
          title=u"Email address",
          description=u"Your email address, free of spam.",
          required=False)

       contact_url = schema.URI(
          title=u"Contact URL",
          required=True)

.. note::

  The Python package ``zope.schema`` define a lot of basic type of
  fields. You can get more on the Cheeseshop, but they have to provides
  as well form widgets for web edition.


And your content need to implement this interface. You can implement
these fields with the help of an ``FieldProperty``.

.. code-block:: python

  from zope.schema.fieldproperty import FieldProperty

  class MyContent(...):
       ...
       interface.implements(IMyContent)
       email = FieldProperty(IMyContent['email'])
       contact_url = FieldProperty(IMyContent['contact_url'])



So now your object dispose of the ``email`` and ``contact_url``
attributes, like you declared in your interface.


Add forms
~~~~~~~~~

Now, you can define an add form:

.. code-block:: python

  from silva.core.views import forms as silvaforms

  class MyContentAddForm(silvaforms.AddForm):

       silvaconf.context(IMyContent)
       silvaconf.name("My Content")


``silva.name`` have to be the meta type of your content. As you can
see, your interface doesn't provide any fields for the required
``id``, and ``title``, but they are going to be added automatically.

.. note::

  An add form is a Zope 3 factory, registered for the given Zope 2
  meta type. If you register your own factory, it will be used when
  you create your content via the Silva Management Interface.


If you have a versioned content, you are going to have two interfaces:
one for your content and one for your version. As yours fields should
be versioned, they should be defined on the version's interface:

.. code-block:: python

  class IMyVersionContent(interface.Interface):
     """A version of my content object.
     """

     info = schema.Text(title=u"General information")
     ...       # Add others fields


On your add form, you have to explicitly say that form fields are
going to be created using your version's interface *(line 8)*:

.. code-block:: python
  :linenos:

  from five import grok

  class MyContentAddForm(silvaforms.AddForm):

     silvaconf.context(IMyContent)
     silvaconf.name("My Content")

     form_fields = grok.Fields(IMyVersionContent)

After having created the new content, the add form is going to fill
values for these fields on the *editable* object returned by your
content. Since your object is versioned this going to be the version.

Edition forms
~~~~~~~~~~~~~

You can create an edition form:

.. code-block:: python

  class MyContentEditForm(silvaforms.EditForm):

       silvaconf.context(IMyContent)


That's it. ``id`` and ``title`` fields are not provided, and should
not: an object can be renamed from its parent container, and the title
is managed via the properties tab.

Like for add forms, when you have an versioned content, you should
create form fields using the version's interface *(line 5)*:

.. code-block:: python
  :linenos:

  class MyContentEditForm(silvaforms.EditForm):

       silvaconf.context(IMyContext)

       form_fields = grok.Fields(IMyVersionContent)


Others forms
~~~~~~~~~~~~

You can overrides any form you from the SMI. We define a new interface
with settings fields:

.. code-block:: python

  class IMyContentSettings(interface.Interface):
       """Settings for my content.
       """

       hide_email = schema.Bool(
          title=u"Hide email address",
          default=True,
          required=False)


And after you can use this interface for your form:

.. code-block:: python

  from five import grok

  class MyContentSettingsForm(silvaforms.PageForm):

       silvaconf.context(IMyContent)
       silvaconf.name("tab_settings")

       # Set form fields using our new interface
       form_fields = grok.Fields(IMyContentSettings)

       # Define one action
       @grok.action(u"Send information")
       def action_send(self, hide_email):
            # hide_email contain the validated form value
            pass



``silvaconf.name`` is used here to define the name of the form. Here
it will defined as ``tab_settings``, which is accessible via the
``properties`` tab in SMI.

.. hint::

  You can define new actions on adding and edition forms as well, like
  settings custom fields. For more information about that, please
  refer to the formlib documentation.

Z3C Forms
---------

You can use Z3C Forms like Formlib forms. For instance for an add form
of a versioned content:

.. code-block:: python

  from silva.core.views import z3cforms as silvaz3cforms
  from z3c.forms import field

  class MyContentAddForm(silvaz3cforms.AddForm):

     silvaconf.context(IMyContent)
     silvaconf.name("My Content")

     fields = field.Fields(IMyVersionContent)


You can have more information about Z3C Forms `here
<http://docs.carduner.net/z3c.form/>`_.
