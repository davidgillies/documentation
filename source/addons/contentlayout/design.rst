
Creating a design
=================

First of all, you need to create an extension (please refer to
:ref:`creating-an-extension`). After you need to:

- enable Grok in your extension (:ref:`enable-grok-for-your-extension`),

- include ``silva.core.contentlayout`` as a dependency in the
  ``configure.zcml`` of your extension.

After you will be able to add a design and define slots for it. You
can finish by adding restrictions to either your design or your slots.

Adding a design
---------------

To create a new design, you need to define a new Python class, inside
an existing Python module of your extension:

.. sourcecode:: python
   :linenos:

   from silva.core.contentlayout import Design, Slot
   from five import grok

   class MyDesign(Design):
      grok.name('my_design')
      grok.title('My Design')

      def update(self):
          self.title = self.context.get_title_or_id()


On line 4, we define the new design by inheriting from the
``silva.core.contentlayout.Design`` class (see
:py:interface:`~silva.core.contentlayout.interfaces.IDesign` for more
information).

On line 5, we give a unique identifier to the design with the help of
the :py:func:`grok.name` directive. This identifier will be used to
identify uniquely the design within Silva. This will let you keep the
possibility to rename or move the design class without breaking
existing content using this design.

On line 6, we give with :py:func:`grok.title` a user-friendly name to
the design, that will be used in the :term:`SMI`.

In addition to the design class, a design template must be
created. This template will be a `Chameleon Page Template`_, with the
extension ``.upt``, and will be associated to the design following the
regular Grok rules: the template filename must have the same name than
your design class in lower case, and be located inside a directory
called the name of your Python module where the design class is
defined, plus ``_templates``. For example, if yor design class is
located inside a Python module called ``mydesign.py``, you will create
a directory called ``mydesign_templates`` next to it, and add your
template inside this directory as ``mydesign.upt``.

The design template will follow the regular `Chameleon Page
Template`_, and its namespace will provide access to:

``design``
   Design object that the design template currently renders.

``content``
   Current content or version in case of a versioned content that is
   rendered using this design template.

``request``
   Zope request object.

``template``
   Refers to your design template (this can be used if you define TAL
   macros in your template, to reuse them in that same template).

The design method ``update`` defined on line 8 will be called before
the design template is rendered. You can override this method in order
to compute any value you will need to render later inside your design
template. For example, you can access the value defined on line 9,
with ``design.title``.

.. note::

   Like for a regular Silva view (see :ref:`creating-a-default-view`),
   you can use both of the directives :py:func:`grok.templatedir` and
   :py:func:`grok.template` to control which design template is
   associated with your design class.


Adding slot to your design
--------------------------

A design is not really useful unless you define slots to be used with
it (:py:interface:`~silva.core.contentlayout.interfaces.ISlot`). For
this you need to define a variable ``slot`` in your design class:

.. sourcecode:: python
   :linenos:

   slots = {
      'first': Slot(),
      'second': Slot(),
      'footer': Slot(tag='footer')}

After you defined the slot on the design, you can refer to them inside
your design template, with the help of the ``slot:`` expression:

.. sourcecode:: html

   <tal:footer tal:content="structure slot:footer" />

You need to use the modifier ``structure`` in conjunction with the
``slot:``, unless you want to escape the HTML generated by the slot.

A slot can take the following options:

``tag``
   HTML tag to use in in the output as the slot tag. It must be a
   block-level element in HTML, to ensure that the contentlayout
   editor works properly. This default to ``div``.

``css_class``
   Optional CSS class to be set on the slot tag.

``restrictions``
   Optional list of restriction objects
   (:py:interface:`~silva.core.contentlayout.itnerfaces.ISlotRestriction`)
   to apply on the blocks contained inside this slot.

.. warning::

   Every slot used inside the template *must be* declared in the
   design. If you remove a slot from a design, you *must* remove it
   from the design, otherwise it won't be detected as not used.


Restricting your design
-----------------------

You can restrict the availability of a design to a given content with
the help of the Grok directive :py:func:`grok.context`.

You can restrict the availability of a design to editor users that
have at least a given permission using the Grok directive
:py:func:`grok.require`. You can refer to the list of Silva default's
:ref:`available-permissions`.


Restricting the slot of your design
-----------------------------------

You can use the following restriction within a slot:

.. class:: silva.core.contentlayout.slot.restictions.Content

   Restrict site content that can be added inside the slot. Takes an
   interface as ``schema`` in parameter.

.. class:: silva.core.contentlayout.slot.restictions.CodeSourceName

   Restrict the code sources that can be added inside the slot. Takes
   two sets of identifier, one as ``allowed`` and one other as
   ``disallowed``.

.. class:: silva.core.contentlayout.slot.restictions.BlockAll

   Restrict all blocks that where not previously authorized before.


Modifying your layout when your design is used
----------------------------------------------

You can modify your Silva :term:`layout` when your design is used for
a page. This will let your design control more part of your page.

For this you can define a customization marker, and after an alternate
layout template that will render for instance less :term:`Content
Provider`, letting this responsability to your design template.

.. warning::

   The layout modification can still be applied when an error, or a
   regular Silva views :term:`page` is rendered.

.. _Chameleon Page Template: http://chameleon.repoze.org/docs/latest/
